// Generated from ExprParser.g4 by ANTLR 4.9.2
import org.antlr.v4.runtime.tree.ParseTreeListener;

/**
 * This interface defines a complete listener for a parse tree produced by
 * {@link ExprParser}.
 */
public interface ExprParserListener extends ParseTreeListener {
	/**
	 * Enter a parse tree produced by {@link ExprParser#parameters}.
	 * @param ctx the parse tree
	 */
	void enterParameters(ExprParser.ParametersContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#parameters}.
	 * @param ctx the parse tree
	 */
	void exitParameters(ExprParser.ParametersContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#paramType}.
	 * @param ctx the parse tree
	 */
	void enterParamType(ExprParser.ParamTypeContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#paramType}.
	 * @param ctx the parse tree
	 */
	void exitParamType(ExprParser.ParamTypeContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#paramDecl}.
	 * @param ctx the parse tree
	 */
	void enterParamDecl(ExprParser.ParamDeclContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#paramDecl}.
	 * @param ctx the parse tree
	 */
	void exitParamDecl(ExprParser.ParamDeclContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#expressions}.
	 * @param ctx the parse tree
	 */
	void enterExpressions(ExprParser.ExpressionsContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#expressions}.
	 * @param ctx the parse tree
	 */
	void exitExpressions(ExprParser.ExpressionsContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#expression}.
	 * @param ctx the parse tree
	 */
	void enterExpression(ExprParser.ExpressionContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#expression}.
	 * @param ctx the parse tree
	 */
	void exitExpression(ExprParser.ExpressionContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#primaryExpr}.
	 * @param ctx the parse tree
	 */
	void enterPrimaryExpr(ExprParser.PrimaryExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#primaryExpr}.
	 * @param ctx the parse tree
	 */
	void exitPrimaryExpr(ExprParser.PrimaryExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#unaryExpr}.
	 * @param ctx the parse tree
	 */
	void enterUnaryExpr(ExprParser.UnaryExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#unaryExpr}.
	 * @param ctx the parse tree
	 */
	void exitUnaryExpr(ExprParser.UnaryExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#conversion}.
	 * @param ctx the parse tree
	 */
	void enterConversion(ExprParser.ConversionContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#conversion}.
	 * @param ctx the parse tree
	 */
	void exitConversion(ExprParser.ConversionContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#operand}.
	 * @param ctx the parse tree
	 */
	void enterOperand(ExprParser.OperandContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#operand}.
	 * @param ctx the parse tree
	 */
	void exitOperand(ExprParser.OperandContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#operandName}.
	 * @param ctx the parse tree
	 */
	void enterOperandName(ExprParser.OperandNameContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#operandName}.
	 * @param ctx the parse tree
	 */
	void exitOperandName(ExprParser.OperandNameContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#literal}.
	 * @param ctx the parse tree
	 */
	void enterLiteral(ExprParser.LiteralContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#literal}.
	 * @param ctx the parse tree
	 */
	void exitLiteral(ExprParser.LiteralContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#basicLit}.
	 * @param ctx the parse tree
	 */
	void enterBasicLit(ExprParser.BasicLitContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#basicLit}.
	 * @param ctx the parse tree
	 */
	void exitBasicLit(ExprParser.BasicLitContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#integer}.
	 * @param ctx the parse tree
	 */
	void enterInteger(ExprParser.IntegerContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#integer}.
	 * @param ctx the parse tree
	 */
	void exitInteger(ExprParser.IntegerContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#string_}.
	 * @param ctx the parse tree
	 */
	void enterString_(ExprParser.String_Context ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#string_}.
	 * @param ctx the parse tree
	 */
	void exitString_(ExprParser.String_Context ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#index}.
	 * @param ctx the parse tree
	 */
	void enterIndex(ExprParser.IndexContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#index}.
	 * @param ctx the parse tree
	 */
	void exitIndex(ExprParser.IndexContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#type_}.
	 * @param ctx the parse tree
	 */
	void enterType_(ExprParser.Type_Context ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#type_}.
	 * @param ctx the parse tree
	 */
	void exitType_(ExprParser.Type_Context ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#typeName}.
	 * @param ctx the parse tree
	 */
	void enterTypeName(ExprParser.TypeNameContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#typeName}.
	 * @param ctx the parse tree
	 */
	void exitTypeName(ExprParser.TypeNameContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#qualifiedIdent}.
	 * @param ctx the parse tree
	 */
	void enterQualifiedIdent(ExprParser.QualifiedIdentContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#qualifiedIdent}.
	 * @param ctx the parse tree
	 */
	void exitQualifiedIdent(ExprParser.QualifiedIdentContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#methodExpr}.
	 * @param ctx the parse tree
	 */
	void enterMethodExpr(ExprParser.MethodExprContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#methodExpr}.
	 * @param ctx the parse tree
	 */
	void exitMethodExpr(ExprParser.MethodExprContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#receiverType}.
	 * @param ctx the parse tree
	 */
	void enterReceiverType(ExprParser.ReceiverTypeContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#receiverType}.
	 * @param ctx the parse tree
	 */
	void exitReceiverType(ExprParser.ReceiverTypeContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#typeAssertion}.
	 * @param ctx the parse tree
	 */
	void enterTypeAssertion(ExprParser.TypeAssertionContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#typeAssertion}.
	 * @param ctx the parse tree
	 */
	void exitTypeAssertion(ExprParser.TypeAssertionContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#expressionList}.
	 * @param ctx the parse tree
	 */
	void enterExpressionList(ExprParser.ExpressionListContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#expressionList}.
	 * @param ctx the parse tree
	 */
	void exitExpressionList(ExprParser.ExpressionListContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#arguments}.
	 * @param ctx the parse tree
	 */
	void enterArguments(ExprParser.ArgumentsContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#arguments}.
	 * @param ctx the parse tree
	 */
	void exitArguments(ExprParser.ArgumentsContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#slice}.
	 * @param ctx the parse tree
	 */
	void enterSlice(ExprParser.SliceContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#slice}.
	 * @param ctx the parse tree
	 */
	void exitSlice(ExprParser.SliceContext ctx);
	/**
	 * Enter a parse tree produced by {@link ExprParser#eos}.
	 * @param ctx the parse tree
	 */
	void enterEos(ExprParser.EosContext ctx);
	/**
	 * Exit a parse tree produced by {@link ExprParser#eos}.
	 * @param ctx the parse tree
	 */
	void exitEos(ExprParser.EosContext ctx);
}