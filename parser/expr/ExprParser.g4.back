parser grammar ExprParser;

options {
    tokenVocab=ExprLexer;
}

parameters: paramDecl (COMMA paramDecl)* EOF;

paramDecl: IDENTIFIER | (IDENTIFIER COLON paramType);

paramType: IDENTIFIER;

expressions: expression  EOF;

expression:
	primaryExpr
	| unary_op = (
	    PLUS
        | MINUS
        | EXCLAMATION
        | CARET
//        | STAR
//        | AMPERSAND
	) expression
	| expression mul_op = (
         STAR
        | DIV
        | MOD
        | LSHIFT
        | RSHIFT
        | AMPERSAND
        | BIT_CLEAR
	) expression
	| expression add_op = (PLUS | MINUS | OR | CARET) expression
	| expression rel_op = (
	    EQUALS
        | NOT_EQUALS
        | LESS
        | LESS_OR_EQUALS
        | GREATER
        | GREATER_OR_EQUALS
	)  expression
	| expression LOGICAL_AND expression
	| expression LOGICAL_OR expression
	;

primaryExpr:
	operand
	| conversion
	| methodExpr
	| primaryExpr (
		(DOT IDENTIFIER)
		| index
		| slice_
		| typeAssertion
		| arguments
	);

conversion: type_ L_PAREN expression COMMA? R_PAREN;

// 文本、变量名（a a.b），括号包含表达式
operand: literal | operandName | L_PAREN expression R_PAREN;

operandName: IDENTIFIER (DOT IDENTIFIER)?;
//operandName: IDENTIFIER (DOT IDENTIFIER)*;

literal: basicLit;

basicLit:
	NIL_LIT
	| integer
	| string_
	| float_
	| IMAGINARY_LIT
	| RUNE_LIT;

integer:
	DECIMAL_LIT
	| BINARY_LIT
	| OCTAL_LIT
	| HEX_LIT
	| IMAGINARY_LIT
	| RUNE_LIT;

string_: RAW_STRING_LIT | INTERPRETED_STRING_LIT;

float_: FLOAT_LIT;

index: L_BRACKET expression R_BRACKET;


type_: typeName  | L_PAREN type_ R_PAREN;
typeName: qualifiedIdent | IDENTIFIER;

qualifiedIdent: IDENTIFIER DOT IDENTIFIER;

methodExpr: type_ DOT IDENTIFIER;

receiverType: type_;

typeAssertion: DOT L_PAREN type_ R_PAREN;

expressionList: expression (COMMA expression)*;

arguments:
	L_PAREN (
		(expressionList | type_ (COMMA expressionList)?) ELLIPSIS? COMMA?
	)? R_PAREN;

//arguments:
//	L_PAREN (
//		(expressionList) ELLIPSIS? COMMA?
//	)? R_PAREN;

slice_:
	L_BRACKET (
		expression? COLON expression?
		| expression? COLON expression COLON expression
	) R_BRACKET;
